StepGillespie              package:smfsb               R Documentation

_C_r_e_a_t_e _a _f_u_n_c_t_i_o_n _f_o_r _a_d_v_a_n_c_i_n_g _t_h_e _s_t_a_t_e _o_f _a_n _S_P_N _b_y _u_s_i_n_g _t_h_e
_G_i_l_l_e_s_p_i_e _a_l_g_o_r_i_t_h_m

_D_e_s_c_r_i_p_t_i_o_n:

     This function creates a function for advancing the state of an SPN
     model using the Gillespie algorithm. The resulting function
     (closure) can be used in conjunction with other functions (such as
     ‘simTs’) for simulating realisations of SPN models.

_U_s_a_g_e:

     StepGillespie(N)
     
_A_r_g_u_m_e_n_t_s:

       N: An R list with named components representing a stochastic
          Petri net (SPN). Should contain ‘N$Pre’, a matrix
          representing the LHS stoichiometries, ‘N$Post’, a matrix
          representing the RHS stoichiometries, and ‘N$h’, a function
          representing the rates of the reaction processes. ‘N$h’
          should have first argument ‘x’, a vector representing the
          current state of the system, and second argument ‘t’, a
          scalar representing the current simulation time (in the
          typical time-homogeneous case, ‘N$h’ will ignore this
          argument).  ‘N$h’ may possess additional arguments,
          representing reaction rates, for example. ‘N’ does not need
          to contain an initial marking, ‘N$M’. ‘N$M’ will be ignored
          by most functions which use the resulting function closure.

_V_a_l_u_e:

     An R function which can be used to advance the state of the SPN
     model ‘N’ by using the Gillespie algorithm. The function closure
     has interface ‘function(x0,t0,deltat,...)’, where ‘x0’ and ‘t0’
     represent the initial state and time, and ‘deltat’ represents the
     amount of time by which the process should be advanced. The
     function closure returns a vector representing the simulated state
     of the system at the new time.

_S_e_e _A_l_s_o:

     ‘StepEulerSPN’, ‘gillespied’, ‘simTs’, ‘simTimes’, ‘simSample’,
     ‘StepFRM’, ‘StepPTS’, ‘StepCLE’

_E_x_a_m_p_l_e_s:

     # load up the Lotka-Volterra (LV) model
     data(spnModels)
     LV
     # create a stepping function
     stepLV = StepGillespie(LV)
     # step the function
     print(stepLV(c(x1=50,x2=100),0,1))
     # simulate a realisation of the process and plot it
     out = simTs(c(x1=50,x2=100),0,100,0.1,stepLV)
     plot(out)
     plot(out,plot.type="single",lty=1:2)
     # simulate a realisation using simTimes
     times = seq(0,100,by=0.1)
     plot(ts(simTimes(c(x1=50,x2=100),0,times,stepLV),start=0,deltat=0.1),plot.type="single",lty=1:2)
     # simulate a realisation at irregular times
     times = c(0,10,20,50,100)
     out2 = simTimes(c(x1=50,x2=100),0,times,stepLV)
     print(out2)
     

